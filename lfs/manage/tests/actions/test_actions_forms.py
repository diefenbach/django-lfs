from django.forms import ModelForm

from lfs.core.models import Action


class TestActionUpdateForm:
    """Test Action update form behavior (automatically generated by Django)."""

    def test_form_initialization_with_action(self, action):
        """Should initialize form with action data."""

        # Create form using Django's model form factory
        class ActionForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link")

        form = ActionForm(instance=action)

        assert form.instance == action
        assert form.instance.title == action.title
        assert form.instance.link == action.link
        assert form.instance.active == action.active

    def test_valid_form_data(self):
        """Should accept valid form data."""

        class ActionForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link")

        data = {
            "title": "Test Action",
            "link": "https://example.com",
            "active": True,
        }

        form = ActionForm(data=data)
        assert form.is_valid()

    def test_required_fields_validation(self):
        """Should require title and link fields."""

        class ActionForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link")

        # Test missing title
        data = {"link": "https://example.com", "active": True}
        form = ActionForm(data=data)
        assert not form.is_valid()
        assert "title" in form.errors

        # Test missing link
        data = {"title": "Test Action", "active": True}
        form = ActionForm(data=data)
        assert not form.is_valid()
        assert "link" in form.errors

    def test_title_max_length_validation(self):
        """Should validate title maximum length."""

        class ActionForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link")

        long_title = "A" * 41  # Assuming max_length is 40
        data = {"title": long_title, "link": "https://example.com", "active": True}
        form = ActionForm(data=data)
        assert not form.is_valid()
        assert "title" in form.errors

    def test_link_format_validation(self):
        """Should validate link format."""

        class ActionForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link")

        invalid_urls = ["invalid-url", ""]
        for invalid_url in invalid_urls:
            data = {"title": "Test Action", "link": invalid_url, "active": True}
            form = ActionForm(data=data)
            assert not form.is_valid(), f"URL '{invalid_url}' should be invalid"
            assert "link" in form.errors

    def test_valid_link_formats(self):
        """Should accept valid link formats."""

        class ActionForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link")

        valid_urls = ["https://example.com", "http://example.com", "https://example.com/path?query=value"]

        for valid_url in valid_urls:
            data = {"title": "Test Action", "link": valid_url, "active": True}
            form = ActionForm(data=data)
            assert form.is_valid(), f"URL '{valid_url}' should be valid"

    def test_form_save_creates_action(self, action_group):
        """Should create new action when saving form."""

        class ActionForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link")

        data = {"title": "New Action", "link": "https://new.com", "active": True}
        form = ActionForm(data=data)

        assert form.is_valid()
        action = form.save(commit=False)
        action.group = action_group
        action.save()

        assert Action.objects.filter(title="New Action").exists()

    def test_form_save_updates_existing_action(self, action):
        """Should update existing action when saving form."""

        class ActionForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link")

        data = {"title": "Updated Action", "link": "https://updated.com", "active": False}
        form = ActionForm(data=data, instance=action)

        assert form.is_valid()
        updated_action = form.save()

        assert updated_action == action
        assert updated_action.title == "Updated Action"
        assert updated_action.link == "https://updated.com"
        assert updated_action.active is False


class TestActionCreateForm:
    """Test Action create form behavior (automatically generated by Django)."""

    def test_form_includes_required_fields(self):
        """Should include required fields for action creation."""

        class ActionCreateForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link", "group")

        form = ActionCreateForm()
        assert "title" in form.fields
        assert "link" in form.fields
        assert "active" in form.fields
        assert "group" in form.fields

    def test_valid_form_data(self, action_group):
        """Should accept valid form data."""

        class ActionCreateForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link", "group")

        data = {
            "title": "New Action",
            "link": "https://example.com",
            "active": True,
            "group": action_group.id,
        }

        form = ActionCreateForm(data=data)
        assert form.is_valid()

    def test_required_fields_validation(self):
        """Should require title, link, and group fields."""

        class ActionCreateForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link", "group")

        # Test missing title
        data = {"link": "https://example.com", "active": True, "group": 1}
        form = ActionCreateForm(data=data)
        assert not form.is_valid()
        assert "title" in form.errors

        # Test missing link
        data = {"title": "Test Action", "active": True, "group": 1}
        form = ActionCreateForm(data=data)
        assert not form.is_valid()
        assert "link" in form.errors

        # Test missing group
        data = {"title": "Test Action", "link": "https://example.com", "active": True}
        form = ActionCreateForm(data=data)
        assert not form.is_valid()
        assert "group" in form.errors

    def test_form_save_creates_action(self, action_group):
        """Should create new action when saving form."""

        class ActionCreateForm(ModelForm):
            class Meta:
                model = Action
                fields = ("active", "title", "link", "group")

        data = {"title": "New Action", "link": "https://new.com", "active": True, "group": action_group.id}
        form = ActionCreateForm(data=data)

        assert form.is_valid()
        action = form.save()

        assert action.title == "New Action"
        assert action.link == "https://new.com"
        assert action.active is True
        assert action.group == action_group
